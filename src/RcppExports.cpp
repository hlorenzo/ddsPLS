// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sdRcpp
NumericVector sdRcpp(NumericMatrix x);
RcppExport SEXP _ddsPLS_sdRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sdRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// get_sd_matrixRcpp
NumericMatrix get_sd_matrixRcpp(NumericMatrix x);
RcppExport SEXP _ddsPLS_get_sd_matrixRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sd_matrixRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// scaleRcpp
NumericMatrix scaleRcpp(NumericMatrix x);
RcppExport SEXP _ddsPLS_scaleRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// mmultC
NumericMatrix mmultC(NumericMatrix m1, NumericMatrix m2);
RcppExport SEXP _ddsPLS_mmultC(SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(mmultC(m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// do_one_componentCpp
List do_one_componentCpp(const NumericMatrix x0, const NumericMatrix y0, const NumericMatrix COV, double lam, double errorMin);
RcppExport SEXP _ddsPLS_do_one_componentCpp(SEXP x0SEXP, SEXP y0SEXP, SEXP COVSEXP, SEXP lamSEXP, SEXP errorMinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type COV(COVSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type errorMin(errorMinSEXP);
    rcpp_result_gen = Rcpp::wrap(do_one_componentCpp(x0, y0, COV, lam, errorMin));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_pls_CT_Cpp
NumericMatrix bootstrap_pls_CT_Cpp(const NumericMatrix X_init, const NumericMatrix Y_init, const NumericVector lambdas, const NumericVector lambda_prev, NumericMatrix uIN, NumericMatrix vIN, const int h, const double errorMin);
RcppExport SEXP _ddsPLS_bootstrap_pls_CT_Cpp(SEXP X_initSEXP, SEXP Y_initSEXP, SEXP lambdasSEXP, SEXP lambda_prevSEXP, SEXP uINSEXP, SEXP vINSEXP, SEXP hSEXP, SEXP errorMinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X_init(X_initSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y_init(Y_initSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type lambda_prev(lambda_prevSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type uIN(uINSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type vIN(vINSEXP);
    Rcpp::traits::input_parameter< const int >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double >::type errorMin(errorMinSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_pls_CT_Cpp(X_init, Y_init, lambdas, lambda_prev, uIN, vIN, h, errorMin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ddsPLS_sdRcpp", (DL_FUNC) &_ddsPLS_sdRcpp, 1},
    {"_ddsPLS_get_sd_matrixRcpp", (DL_FUNC) &_ddsPLS_get_sd_matrixRcpp, 1},
    {"_ddsPLS_scaleRcpp", (DL_FUNC) &_ddsPLS_scaleRcpp, 1},
    {"_ddsPLS_mmultC", (DL_FUNC) &_ddsPLS_mmultC, 2},
    {"_ddsPLS_do_one_componentCpp", (DL_FUNC) &_ddsPLS_do_one_componentCpp, 5},
    {"_ddsPLS_bootstrap_pls_CT_Cpp", (DL_FUNC) &_ddsPLS_bootstrap_pls_CT_Cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_ddsPLS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
